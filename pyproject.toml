[project]
name = "ai-first"
version = "0.1.0"
description = "Repository consisting of different tiny projects for learning about deep learning, transformers, diffusion models, and LLM development"
authors = [
    {name = "Eduard Kakosyan", email = "eduard@ai-first.ca"}
]
readme = "README.md"
license = {file = "LICENSE"}
requires-python = ">=3.13.1"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13.1",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["machine-learning", "deep-learning", "transformers", "diffusion-models", "pytorch", "nlp"]

dependencies = [
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "transformers>=4.30.0",
    "diffusers>=0.20.0",
    "gradio[mcp]>=4.0.0",
    "numpy>=1.24.0",
    "tqdm>=4.65.0",
    "tensorboard>=2.13.0",
    "wandb>=0.15.0",
    "pyyaml>=6.0.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "scikit-learn>=1.3.0",
    "pillow>=10.0.0",
    "accelerate>=0.20.0",
    "datasets>=2.14.0",
    "tokenizers>=0.13.0",
    "safetensors>=0.3.0",
    "textblob>=0.19.0",
    "smolagents[mcp]>=1.16.1",
    "mcp>=1.9.0",
    "python-dotenv>=1.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]

vision = [
    "opencv-python>=4.8.0",
    "timm>=0.9.0",
    "albumentations>=1.3.0",
]

nlp = [
    "spacy>=3.6.0",
    "nltk>=3.8.0",
    "sentencepiece>=0.1.99",
]

[project.urls]
Homepage = "https://github.com/eduardkakosyan/ai-first"
Repository = "https://github.com/eduardkakosyan/ai-first"
Issues = "https://github.com/eduardkakosyan/ai-first/issues"

[tool.uv]
# UV-specific configuration
dev-dependencies = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "black>=23.7.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]

[tool.ruff]
target-version = "py313"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.isort]
known-first-party = ["ai_first"]

[tool.black]
target-version = ['py313']
line-length = 88
skip-string-normalization = true

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = [
    "tests",
]
pythonpath = [
    ".",
]

[tool.coverage.run]
source = ["ai_first"]
omit = [
    "*/tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
] 
